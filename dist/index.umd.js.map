{"version":3,"file":"index.umd.js","sources":["../src/FormAnalyticsCustomFieldTracker.js","../src/Enums/FieldCategories.js","../src/BaseField.js"],"sourcesContent":["/**\n * Field Classes Registry\n * Maps field types to their corresponding classes\n */\nconst fieldClasses = {};\nlet debugMode = false;\n\n/**\n * Factory function for creating fields of any type\n * Uses the factory pattern to create field instances based on type\n *\n * @param {Object} tracker - Matomo tracker instance\n * @param {HTMLElement} element - DOM element\n * @param {string} fieldName - Field identifier\n * @param {string} fieldType - Type of field to create\n * @returns {BaseField|null} Created field instance or null if type not found\n * @throws {Error} If field creation fails\n */\nfunction createField(tracker, element, fieldName, fieldType) {\n    const FieldClass = fieldClasses[fieldType];\n    if (!FieldClass) {\n        debugMode && console.error(`No field class found for type: ${fieldType}`);\n        return null;\n    }\n\n    try {\n        // Verify the fieldType matches the class's static property\n        if (FieldClass.fieldType !== fieldType) {\n            debugMode && console.error(`Field type mismatch: expected ${fieldType}, got ${FieldClass.fieldType}`);\n            return null;\n        }\n\n        const field = new FieldClass(tracker, element, fieldName);\n        field.setupEventListeners();\n        return field;\n    } catch (error) {\n        debugMode && console.error(`Error creating ${fieldType} field:`, error);\n        return null;\n    }\n}\n\nfunction injectCustomFields(tracker, form) {\n    // Dynamically get field types and their selectors from registered field classes\n    Object.entries(fieldClasses).forEach(([fieldType, FieldClass]) => {\n        // Check if the field class has a selector defined\n        if (FieldClass.selector) {\n            const fields = form.querySelectorAll(FieldClass.selector);\n            fields.forEach(field => {\n                const fieldName = field.getAttribute('data-name');\n                const customField = createField(tracker, field, fieldName, fieldType);\n\n                if (customField) {\n                    // Add to tracker\n                    tracker.fields.push(customField);\n                    tracker.fieldNodes.push(field);\n\n                    debugMode && console.log(`✅ Integrated custom ${fieldType} field: ${fieldName}`);\n                }\n            });\n        }\n    });\n}\n\nexport default {\n    init(customFields = [], debug = false) {\n        debugMode = debug;\n\n        // Register custom fields if provided\n        if (customFields && customFields.length > 0) {\n            customFields.forEach(({ fieldType, FieldClass }) => {\n                if (fieldType && FieldClass) {\n                    fieldClasses[fieldType] = FieldClass;\n                } else {\n                    debugMode && console.warn('Custom field must have fieldType and FieldClass properties');\n                }\n            });\n        }\n\n        // Wait for FormAnalytics to initialize\n        window.matomoFormAnalyticsAsyncInit = function () {\n            const forms = document.querySelectorAll('form, [data-matomo-form]');\n            forms.forEach(form => {\n                setTimeout(() => {\n                    const tracker = window.Piwik?.FormAnalytics?.element?.findFormTrackerInstance(form);\n                    if (tracker) {\n                        injectCustomFields(tracker, form);\n                    }\n                }, 100);\n            });\n        };\n    }\n};\n\n/**\n * Get available field types\n * @returns {string[]} Array of supported field types\n */\nexport const getAvailableFieldTypes = () => Object.keys(fieldClasses);\n\n/**\n * Check if a field type is supported\n * @param {string} fieldType - Field type to check\n * @returns {boolean} True if supported, false otherwise\n */\nexport const isFieldTypeSupported = (type) => type in fieldClasses;\n\n/**\n * Provides global access to the current debug mode state.\n * This allows other modules (e.g., BaseField) to check whether debug logging is enabled,\n * without needing to pass the debug flag through constructors or method parameters.\n */\nexport const getDebugMode = () => debugMode;\n","/**\n * Field Categories Enum\n *\n * Defines the three field categories supported by Matomo FormAnalytics\n * - FIELD_TEXT: Text-based input fields\n * - FIELD_SELECTABLE: Selection-based fields\n * - FIELD_CHECKABLE: Checkbox/radio fields\n *\n * @enum {string}\n */\nexport const FieldCategories = {\n    /**\n     * Text-based input fields (password, text, url, tel, email, search, textarea)\n     */\n    TEXT: 'FIELD_TEXT',\n    /**\n     * Selection-based fields (color, date, datetime, datetime-local, month, number, range, time, week, select)\n     */\n    SELECTABLE: 'FIELD_SELECTABLE',\n    /**\n     * Checkbox/radio fields (radio, checkbox)\n     */\n    CHECKABLE: 'FIELD_CHECKABLE'\n};\n\n/**\n * Validates if a field category is supported by Matomo\n * @param {string} category - Field category to validate\n * @returns {boolean} True if category is valid\n */\nexport function isValidFieldCategory(category) {\n    return Object.values(FieldCategories).includes(category);\n}\n\n/**\n * Gets all supported field categories\n * @returns {string[]} Array of all supported field categories\n */\nexport function getSupportedFieldCategories() {\n    return Object.values(FieldCategories);\n}\n\n/**\n * Gets field category description\n * @param {string} category - Field category\n * @returns {string} Human-readable description\n */\nexport function getFieldCategoryDescription(category) {\n    const descriptions = {\n        [FieldCategories.TEXT]: 'Text-based input fields (password, text, url, tel, email, search, textarea)',\n        [FieldCategories.SELECTABLE]: 'Selection-based fields (color, date, datetime, datetime-local, month, number, range, time, week, select)',\n        [FieldCategories.CHECKABLE]: 'Checkbox/radio fields (radio, checkbox)'\n    };\n\n    return descriptions[category] || 'Unknown field category';\n}\n","import { FieldCategories } from './Enums/FieldCategories.js';\nimport { getDebugMode } from './FormAnalyticsCustomFieldTracker.js';\n\n/**\n * BaseField Class\n *\n * A reusable abstract class providing shared tracking logic\n * for all custom form field types (e.g., WYSIWYG, rating, image selector).\n *\n * @class BaseField\n * @abstract\n */\nexport class BaseField {\n    /**\n     * Field Categories ENUM - Available to all subclasses\n     * @static\n     */\n    static FieldCategories = FieldCategories;\n\n    /**\n     * Creates a new BaseField instance\n     *\n     * @param {Object} tracker - Matomo tracker instance\n     * @param {HTMLElement} element - DOM element for the field\n     * @param {string} fieldName - Unique identifier for the field\n     */\n    constructor(tracker, element, fieldName) {\n        // Get fieldType and category from static properties\n        const fieldType = this.constructor.fieldType;\n        const category = this.constructor.category;\n        const selector = this.constructor.selector;\n\n        if (!fieldType || !category || !selector) {\n            throw new Error(`${this.constructor.name} must define static fieldType, selector and category properties`);\n        }\n\n        // Common properties for all field types\n        this.discoveredDate = Date.now();\n        this.timespent = 0;\n        this.hesitationtime = 0;\n        this.nodes = [element];\n        this.tagName = 'div';\n        this.fieldName = fieldName;\n        this.fieldType = fieldType;\n        this.startFocus = null;\n        this.timeLastChange = null;\n        this.numChanges = 0;\n        this.numFocus = 0;\n        this.numDeletes = 0;\n        this.numCursor = 0;\n        this.canCountChange = true;\n        this.isFocusedCausedAuto = false;\n        this.hasChangedValueSinceFocus = false;\n        this.tracker = tracker;\n        this.category = category;\n\n        // Store references for field-specific implementations\n        this.element = element;\n        this.debug = getDebugMode();\n\n        // Cleanup tracking\n        this._eventListeners = new Map();\n        this._timers = new Set();\n        this._isDestroyed = false;\n    }\n\n    /**\n     * Helper method to track event listeners for cleanup\n     * @private\n     * @param {HTMLElement} element - Element to attach listener to\n     * @param {string} event - Event type\n     * @param {Function} handler - Event handler function\n     * @param {Object} options - Event listener options\n     */\n    _addTrackedEventListener(element, event, handler, options = {}) {\n        if (this._isDestroyed) return;\n\n        const key = `${element}_${event}`;\n        if (!this._eventListeners.has(key)) {\n            this._eventListeners.set(key, []);\n        }\n\n        element.addEventListener(event, handler, options);\n        this._eventListeners.get(key).push({ element, event, handler, options });\n    }\n\n    /**\n     * Helper method to track timers for cleanup\n     * @private\n     * @param {number} timerId - Timer ID from setTimeout/setInterval\n     * @returns {number} The timer ID\n     */\n    _trackTimer(timerId) {\n        if (this._isDestroyed) return timerId;\n        this._timers.add(timerId);\n        return timerId;\n    }\n\n    /**\n     * Abstract method: Gets the interactive element for this field\n     * Must be implemented by subclasses to define their interactive element\n     * @abstract\n     * @returns {HTMLElement|NodeList} Interactive element for this field\n     * @throws {Error} If not implemented by subclass\n     */\n    getInteractiveElement() {\n        throw new Error(`getInteractiveElement() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Abstract method: Determines if field is blank/empty\n     * Must be implemented by subclasses\n     * @abstract\n     * @returns {boolean} True if field is blank, false otherwise\n     * @throws {Error} If not implemented by subclass\n     */\n    isBlank() {\n        throw new Error(`isBlank() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Abstract method: Gets field size/content length\n     * Must be implemented by subclasses\n     * @abstract\n     * @returns {number} Field size (content length, rating value, etc.)\n     * @throws {Error} If not implemented by subclass\n     */\n    getFieldSize() {\n        throw new Error(`getFieldSize() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Sets up event listeners for all custom field types\n     * This method provides common event handling for all custom fields\n     * Can be overridden by subclasses for custom event handling\n     */\n    setupEventListeners() {\n        // Check if the subclass has overridden this method.\n        if (this.constructor.prototype.setupEventListeners !== BaseField.prototype.setupEventListeners) {\n            // Subclass has its own implementation, call it\n            this.constructor.prototype.setupEventListeners.call(this);\n            return;\n        }\n\n        // Default implementation for fields that don't override\n        this.setupDefaultEventListeners();\n    }\n\n    /**\n     * Sets up default event listeners for standard field types\n     * Used by fields that don't need custom event handling\n     */\n    setupDefaultEventListeners() {\n        // Get the actual interactive element (overridden by subclasses)\n        const interactiveElement = this.getInteractiveElement();\n\n        if (!interactiveElement) {\n            this.debug && console.error(`${this.fieldType.toUpperCase()} interactive element not found:`, this.element);\n            return;\n        }\n\n        // Focus event\n        this._addTrackedEventListener(interactiveElement, 'focus', () => {\n            this.onFocus();\n        });\n\n        // Blur event\n        this._addTrackedEventListener(interactiveElement, 'blur', () => {\n            this.onBlur();\n        });\n\n        // Input event (typing)\n        this._addTrackedEventListener(interactiveElement, 'input', () => {\n            this.onChange();\n        });\n\n        // Keydown event (cursor movements, deletions)\n        this._addTrackedEventListener(interactiveElement, 'keydown', (event) => {\n            this.handleKeydown(event);\n        });\n\n        // Click event (cursor movements)\n        this._addTrackedEventListener(interactiveElement, 'click', () => {\n            this.trackCursorMovement();\n            this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} click:`, this.fieldName);\n        });\n    }\n\n    /**\n     * Handles keydown events for cursor and deletion tracking\n     * Tracks arrow keys, home/end, and backspace/delete\n     * @param {KeyboardEvent} event - Keyboard event object\n     */\n    handleKeydown(event) {\n        // Track cursor movements\n        const cursorKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End', 'PageUp', 'PageDown'];\n        if (cursorKeys.includes(event.key)) {\n            this.trackCursorMovement();\n            this.debug && console.log(`${this.fieldType.toUpperCase()} cursor movement:`, event.key);\n        }\n\n        // Track deletions\n        if (event.key === 'Backspace' || event.key === 'Delete') {\n            this.trackDeletion();\n            this.debug && console.log(`${this.fieldType.toUpperCase()} deletion:`, event.key);\n        }\n    }\n\n    /**\n     * Adds a DOM node to this field's node collection\n     * @param {HTMLElement} node - DOM node to add\n     */\n    addNode(node) {\n        this.nodes.push(node);\n    }\n\n    /**\n     * Resets all tracking counters when form is submitted\n     * Called automatically by Matomo tracker on form submission\n     */\n    resetOnFormSubmit() {\n        this.timespent = 0;\n        this.numFocus = 0;\n        this.numDeletes = 0;\n        this.numCursor = 0;\n        this.numChanges = 0;\n        this.startFocus = null;\n        this.timeLastChange = null;\n        this.canCountChange = true;\n        this.hasChangedValueSinceFocus = false;\n        this.isFocusedCausedAuto = false;\n    }\n\n    /**\n     * Calculates total time spent in this field\n     * Includes both tracked time and current session time\n     * @returns {number} Time spent in milliseconds\n     */\n    getTimeSpent() {\n        if (this.numChanges && !this.timespent) {\n            this.timespent = 1;\n        }\n        if (!this.startFocus || this.isFocusedCausedAuto) {\n            return this.timespent;\n        }\n        if (this.timeLastChange) {\n            const timeSpent = this.timeLastChange - this.startFocus;\n            return this.timespent + (timeSpent > 0 ? timeSpent : 0);\n        }\n        return this.timespent + (Date.now() - this.startFocus);\n    }\n\n    /**\n     * Calculates hesitation time before first interaction\n     * Time from field detection to first user interaction\n     * @returns {number} Hesitation time in milliseconds\n     */\n    getHesitationTime() {\n        if (this.numChanges || !this.startFocus || this.isFocusedCausedAuto) {\n            return this.hesitationtime;\n        }\n        return this.hesitationtime + (Date.now() - this.startFocus);\n    }\n\n    /**\n     * Generates tracking parameters for Matomo FormAnalytics\n     * Returns all field metrics in Matomo-compatible format\n     * @returns {Object} Object containing all tracking parameters\n     */\n    getTrackingParams() {\n        return {\n            fa_fn: this.fieldName,\n            fa_ft: this.fieldType,\n            fa_fs: this.getFieldSize(),\n            fa_fb: this.isBlank() ? 1 : 0,\n            fa_fts: this.getTimeSpent(),\n            fa_fht: this.getHesitationTime(),\n            fa_ff: this.numFocus,\n            fa_fch: this.numChanges,\n            fa_fd: this.numDeletes,\n            fa_fcu: this.numCursor\n        };\n    }\n\n    /**\n     * Handles field focus event\n     * Tracks focus count, sets entry field, and triggers Matomo tracking\n     */\n    onFocus() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} focus (${this.fieldName})`);\n        this.startFocus = Date.now();\n        const isNewField = this.fieldName !== this.tracker.lastFocusedFieldName;\n\n        if (isNewField && !this.isFocusedCausedAuto) {\n            this.numFocus++;\n            this.tracker.setEngagedWithForm();\n            this.tracker.trackFieldUpdate(this);\n            this.tracker.exitFieldName = this.fieldName;\n            this.tracker.scheduleSendUpdate();\n        }\n\n        this.tracker.lastFocusedFieldName = this.fieldName;\n        this.canCountChange = true;\n    }\n\n    /**\n     * Handles field blur event\n     * Calculates time spent and updates tracking data\n     */\n    onBlur() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} blur (${this.fieldName})`);\n        if (!this.startFocus) return;\n\n        if (this.hasChangedValueSinceFocus) {\n            if (this.timeLastChange && this.startFocus) {\n                this.timespent += (this.timeLastChange - this.startFocus);\n            }\n            this.timeLastChange = null;\n            this.startFocus = null;\n            return;\n        }\n\n        if (!this.isFocusedCausedAuto) {\n            const now = Date.now();\n            this.timespent += now - this.startFocus;\n            if (!this.numChanges) {\n                this.hesitationtime += now - this.startFocus;\n            }\n            this.tracker.setEngagedWithForm();\n            this.tracker.trackFieldUpdate(this);\n        }\n        this.startFocus = null;\n    }\n\n    /**\n     * Handles field change event\n     * Tracks changes, hesitation time, and sets entry field\n     */\n    onChange() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} changed (${this.fieldName})`);\n        this.timeLastChange = Date.now();\n        if (this.isFocusedCausedAuto) {\n            this.startFocus = this.timeLastChange;\n        } else if (!this.startFocus) {\n            return;\n        }\n\n        this.isFocusedCausedAuto = false;\n        this.hasChangedValueSinceFocus = true;\n\n        if (!this.numChanges) {\n            this.hesitationtime += this.timeLastChange - this.startFocus;\n        }\n\n        if (this.canCountChange) {\n            this.numChanges++;\n            this.canCountChange = false;\n        }\n\n        if (!this.tracker.entryFieldName) {\n            this.tracker.entryFieldName = this.fieldName;\n        }\n\n        this.tracker.setEngagedWithForm();\n        this.tracker.trackFieldUpdate(this);\n    }\n\n    /**\n     * Helper method for tracking cursor movements\n     * Increments cursor count for arrow keys, clicks, etc.\n     */\n    trackCursorMovement() {\n        this.numCursor++;\n    }\n\n    /**\n     * Helper method for tracking deletions\n     * Increments delete count for backspace, delete keys, etc.\n     */\n    trackDeletion() {\n        this.numDeletes++;\n    }\n\n    /**\n     * Destroys the field instance and cleans up all resources\n     * Removes event listeners, clears timers, and nulls heavy references\n     * Safe to call multiple times (idempotent)\n     */\n    destroy() {\n        if (this._isDestroyed) return;\n        this._isDestroyed = true;\n\n        // Remove all tracked event listeners\n        for (const [, listeners] of this._eventListeners) {\n            for (const { element, event, handler, options } of listeners) {\n                try {\n                    element.removeEventListener(event, handler, options);\n                } catch (e) {\n                    this.debug && console.warn(`Failed to remove event listener: ${event}`, e);\n                }\n            }\n        }\n        this._eventListeners.clear();\n\n        // Clear all tracked timers\n        for (const timerId of this._timers) {\n            try {\n                clearTimeout(timerId);\n                clearInterval(timerId);\n            } catch (e) {\n                this.debug && console.warn(`Failed to clear timer: ${timerId}`, e);\n            }\n        }\n        this._timers.clear();\n\n        // Null out heavy references to prevent memory leaks\n        this.element = null;\n        this.nodes = null;\n        this.tracker = null;\n        this.startFocus = null;\n        this.timeLastChange = null;\n    }\n}\n"],"names":["fieldClasses","debugMode","createField","tracker","element","fieldName","fieldType","FieldClass","console","error","field","setupEventListeners","injectCustomFields","form","Object","entries","forEach","selector","fields","querySelectorAll","getAttribute","customField","push","fieldNodes","log","init","customFields","debug","length","warn","window","matomoFormAnalyticsAsyncInit","forms","document","setTimeout","Piwik","FormAnalytics","findFormTrackerInstance","getDebugMode","FieldCategories","TEXT","SELECTABLE","CHECKABLE","isValidFieldCategory","category","values","includes","getSupportedFieldCategories","getFieldCategoryDescription","descriptions","BaseField","constructor","Error","name","discoveredDate","Date","now","timespent","hesitationtime","nodes","tagName","startFocus","timeLastChange","numChanges","numFocus","numDeletes","numCursor","canCountChange","isFocusedCausedAuto","hasChangedValueSinceFocus","_eventListeners","Map","_timers","Set","_isDestroyed","_addTrackedEventListener","event","handler","options","key","has","set","addEventListener","get","_trackTimer","timerId","add","getInteractiveElement","isBlank","getFieldSize","prototype","call","setupDefaultEventListeners","interactiveElement","toUpperCase","onFocus","onBlur","onChange","handleKeydown","trackCursorMovement","cursorKeys","trackDeletion","addNode","node","resetOnFormSubmit","getTimeSpent","timeSpent","getHesitationTime","getTrackingParams","fa_fn","fa_ft","fa_fs","fa_fb","fa_fts","fa_fht","fa_ff","fa_fch","fa_fd","fa_fcu","isNewField","lastFocusedFieldName","setEngagedWithForm","trackFieldUpdate","exitFieldName","scheduleSendUpdate","entryFieldName","destroy","listeners","removeEventListener","e","clear","clearTimeout","clearInterval"],"mappings":";;;;;;IAAA;IACA;IACA;IACA;IACA,MAAMA,YAAY,GAAG,EAAE,CAAA;IACvB,IAAIC,SAAS,GAAG,KAAK,CAAA;;IAErB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAASC,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAE;IACzD,EAAA,MAAMC,UAAU,GAAGP,YAAY,CAACM,SAAS,CAAC,CAAA;MAC1C,IAAI,CAACC,UAAU,EAAE;QACbN,SAAS,IAAIO,OAAO,CAACC,KAAK,CAAC,CAAkCH,+BAAAA,EAAAA,SAAS,EAAE,CAAC,CAAA;IACzE,IAAA,OAAO,IAAI,CAAA;IACf,GAAA;MAEA,IAAI;IACA;IACA,IAAA,IAAIC,UAAU,CAACD,SAAS,KAAKA,SAAS,EAAE;IACpCL,MAAAA,SAAS,IAAIO,OAAO,CAACC,KAAK,CAAC,CAAA,8BAAA,EAAiCH,SAAS,CAAA,MAAA,EAASC,UAAU,CAACD,SAAS,CAAA,CAAE,CAAC,CAAA;IACrG,MAAA,OAAO,IAAI,CAAA;IACf,KAAA;QAEA,MAAMI,KAAK,GAAG,IAAIH,UAAU,CAACJ,OAAO,EAAEC,OAAO,EAAEC,SAAS,CAAC,CAAA;QACzDK,KAAK,CAACC,mBAAmB,EAAE,CAAA;IAC3B,IAAA,OAAOD,KAAK,CAAA;OACf,CAAC,OAAOD,KAAK,EAAE;QACZR,SAAS,IAAIO,OAAO,CAACC,KAAK,CAAC,kBAAkBH,SAAS,CAAA,OAAA,CAAS,EAAEG,KAAK,CAAC,CAAA;IACvE,IAAA,OAAO,IAAI,CAAA;IACf,GAAA;IACJ,CAAA;IAEA,SAASG,kBAAkBA,CAACT,OAAO,EAAEU,IAAI,EAAE;IACvC;IACAC,EAAAA,MAAM,CAACC,OAAO,CAACf,YAAY,CAAC,CAACgB,OAAO,CAAC,CAAC,CAACV,SAAS,EAAEC,UAAU,CAAC,KAAK;IAC9D;QACA,IAAIA,UAAU,CAACU,QAAQ,EAAE;UACrB,MAAMC,MAAM,GAAGL,IAAI,CAACM,gBAAgB,CAACZ,UAAU,CAACU,QAAQ,CAAC,CAAA;IACzDC,MAAAA,MAAM,CAACF,OAAO,CAACN,KAAK,IAAI;IACpB,QAAA,MAAML,SAAS,GAAGK,KAAK,CAACU,YAAY,CAAC,WAAW,CAAC,CAAA;YACjD,MAAMC,WAAW,GAAGnB,WAAW,CAACC,OAAO,EAAEO,KAAK,EAAEL,SAAS,EAAEC,SAAS,CAAC,CAAA;IAErE,QAAA,IAAIe,WAAW,EAAE;IACb;IACAlB,UAAAA,OAAO,CAACe,MAAM,CAACI,IAAI,CAACD,WAAW,CAAC,CAAA;IAChClB,UAAAA,OAAO,CAACoB,UAAU,CAACD,IAAI,CAACZ,KAAK,CAAC,CAAA;cAE9BT,SAAS,IAAIO,OAAO,CAACgB,GAAG,CAAC,uBAAuBlB,SAAS,CAAA,QAAA,EAAWD,SAAS,CAAA,CAAE,CAAC,CAAA;IACpF,SAAA;IACJ,OAAC,CAAC,CAAA;IACN,KAAA;IACJ,GAAC,CAAC,CAAA;IACN,CAAA;AAEA,0CAAe;MACXoB,IAAIA,CAACC,YAAY,GAAG,EAAE,EAAEC,KAAK,GAAG,KAAK,EAAE;IACnC1B,IAAAA,SAAS,GAAG0B,KAAK,CAAA;;IAEjB;IACA,IAAA,IAAID,YAAY,IAAIA,YAAY,CAACE,MAAM,GAAG,CAAC,EAAE;UACzCF,YAAY,CAACV,OAAO,CAAC,CAAC;YAAEV,SAAS;IAAEC,QAAAA,UAAAA;IAAW,OAAC,KAAK;YAChD,IAAID,SAAS,IAAIC,UAAU,EAAE;IACzBP,UAAAA,YAAY,CAACM,SAAS,CAAC,GAAGC,UAAU,CAAA;IACxC,SAAC,MAAM;IACHN,UAAAA,SAAS,IAAIO,OAAO,CAACqB,IAAI,CAAC,4DAA4D,CAAC,CAAA;IAC3F,SAAA;IACJ,OAAC,CAAC,CAAA;IACN,KAAA;;IAEA;QACAC,MAAM,CAACC,4BAA4B,GAAG,YAAY;IAC9C,MAAA,MAAMC,KAAK,GAAGC,QAAQ,CAACd,gBAAgB,CAAC,0BAA0B,CAAC,CAAA;IACnEa,MAAAA,KAAK,CAAChB,OAAO,CAACH,IAAI,IAAI;IAClBqB,QAAAA,UAAU,CAAC,MAAM;IACb,UAAA,MAAM/B,OAAO,GAAG2B,MAAM,CAACK,KAAK,EAAEC,aAAa,EAAEhC,OAAO,EAAEiC,uBAAuB,CAACxB,IAAI,CAAC,CAAA;IACnF,UAAA,IAAIV,OAAO,EAAE;IACTS,YAAAA,kBAAkB,CAACT,OAAO,EAAEU,IAAI,CAAC,CAAA;IACrC,WAAA;aACH,EAAE,GAAG,CAAC,CAAA;IACX,OAAC,CAAC,CAAA;SACL,CAAA;IACL,GAAA;IACJ,CAAC,CAAA;;IAeD;IACA;IACA;IACA;IACA;IACO,MAAMyB,YAAY,GAAGA,MAAMrC,SAAS;;IC/G3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACO,UAAMsC,eAAe,GAAG;IAC3B;IACJ;IACA;IACIC,EAAAA,IAAI,EAAE,YAAY;IAClB;IACJ;IACA;IACIC,EAAAA,UAAU,EAAE,kBAAkB;IAC9B;IACJ;IACA;IACIC,EAAAA,SAAS,EAAE,iBAAA;IACf,EAAC;;IAED;IACA;IACA;IACA;IACA;IACO,SAASC,oBAAoBA,CAACC,QAAQ,EAAE;MAC3C,OAAO9B,MAAM,CAAC+B,MAAM,CAACN,eAAe,CAAC,CAACO,QAAQ,CAACF,QAAQ,CAAC,CAAA;IAC5D,CAAA;;IAEA;IACA;IACA;IACA;IACO,SAASG,2BAA2BA,GAAG;IAC1C,EAAA,OAAOjC,MAAM,CAAC+B,MAAM,CAACN,eAAe,CAAC,CAAA;IACzC,CAAA;;IAEA;IACA;IACA;IACA;IACA;IACO,SAASS,2BAA2BA,CAACJ,QAAQ,EAAE;IAClD,EAAA,MAAMK,YAAY,GAAG;IACjB,IAAA,CAACV,eAAe,CAACC,IAAI,GAAG,6EAA6E;IACrG,IAAA,CAACD,eAAe,CAACE,UAAU,GAAG,0GAA0G;QACxI,CAACF,eAAe,CAACG,SAAS,GAAG,yCAAA;OAChC,CAAA;IAED,EAAA,OAAOO,YAAY,CAACL,QAAQ,CAAC,IAAI,wBAAwB,CAAA;IAC7D;;ICpDA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,MAAMM,SAAS,CAAC;IACnB;IACJ;IACA;IACA;MACI,OAAOX,eAAe,GAAGA,eAAe,CAAA;;IAExC;IACJ;IACA;IACA;IACA;IACA;IACA;IACIY,EAAAA,WAAWA,CAAChD,OAAO,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACrC;IACA,IAAA,MAAMC,SAAS,GAAG,IAAI,CAAC6C,WAAW,CAAC7C,SAAS,CAAA;IAC5C,IAAA,MAAMsC,QAAQ,GAAG,IAAI,CAACO,WAAW,CAACP,QAAQ,CAAA;IAC1C,IAAA,MAAM3B,QAAQ,GAAG,IAAI,CAACkC,WAAW,CAAClC,QAAQ,CAAA;QAE1C,IAAI,CAACX,SAAS,IAAI,CAACsC,QAAQ,IAAI,CAAC3B,QAAQ,EAAE;UACtC,MAAM,IAAImC,KAAK,CAAC,CAAG,EAAA,IAAI,CAACD,WAAW,CAACE,IAAI,CAAA,+DAAA,CAAiE,CAAC,CAAA;IAC9G,KAAA;;IAEA;IACA,IAAA,IAAI,CAACC,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE,CAAA;QAChC,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;QAClB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAA;IACvB,IAAA,IAAI,CAACC,KAAK,GAAG,CAACvD,OAAO,CAAC,CAAA;QACtB,IAAI,CAACwD,OAAO,GAAG,KAAK,CAAA;QACpB,IAAI,CAACvD,SAAS,GAAGA,SAAS,CAAA;QAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS,CAAA;QAC1B,IAAI,CAACuD,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAACC,UAAU,GAAG,CAAC,CAAA;QACnB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAA;QACjB,IAAI,CAACC,UAAU,GAAG,CAAC,CAAA;QACnB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;QAClB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAACC,mBAAmB,GAAG,KAAK,CAAA;QAChC,IAAI,CAACC,yBAAyB,GAAG,KAAK,CAAA;QACtC,IAAI,CAAClE,OAAO,GAAGA,OAAO,CAAA;QACtB,IAAI,CAACyC,QAAQ,GAAGA,QAAQ,CAAA;;IAExB;QACA,IAAI,CAACxC,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAA,IAAI,CAACuB,KAAK,GAAGW,YAAY,EAAE,CAAA;;IAE3B;IACA,IAAA,IAAI,CAACgC,eAAe,GAAG,IAAIC,GAAG,EAAE,CAAA;IAChC,IAAA,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE,CAAA;QACxB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAA;IAC7B,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;MACIC,wBAAwBA,CAACvE,OAAO,EAAEwE,KAAK,EAAEC,OAAO,EAAEC,OAAO,GAAG,EAAE,EAAE;QAC5D,IAAI,IAAI,CAACJ,YAAY,EAAE,OAAA;IAEvB,IAAA,MAAMK,GAAG,GAAG,CAAA,EAAG3E,OAAO,CAAA,CAAA,EAAIwE,KAAK,CAAE,CAAA,CAAA;QACjC,IAAI,CAAC,IAAI,CAACN,eAAe,CAACU,GAAG,CAACD,GAAG,CAAC,EAAE;UAChC,IAAI,CAACT,eAAe,CAACW,GAAG,CAACF,GAAG,EAAE,EAAE,CAAC,CAAA;IACrC,KAAA;QAEA3E,OAAO,CAAC8E,gBAAgB,CAACN,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAA;QACjD,IAAI,CAACR,eAAe,CAACa,GAAG,CAACJ,GAAG,CAAC,CAACzD,IAAI,CAAC;UAAElB,OAAO;UAAEwE,KAAK;UAAEC,OAAO;IAAEC,MAAAA,OAAAA;IAAQ,KAAC,CAAC,CAAA;IAC5E,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACA;MACIM,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAA,IAAI,IAAI,CAACX,YAAY,EAAE,OAAOW,OAAO,CAAA;IACrC,IAAA,IAAI,CAACb,OAAO,CAACc,GAAG,CAACD,OAAO,CAAC,CAAA;IACzB,IAAA,OAAOA,OAAO,CAAA;IAClB,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACIE,EAAAA,qBAAqBA,GAAG;QACpB,MAAM,IAAInC,KAAK,CAAC,CAAA,+CAAA,EAAkD,IAAI,CAAC9C,SAAS,QAAQ,CAAC,CAAA;IAC7F,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACIkF,EAAAA,OAAOA,GAAG;QACN,MAAM,IAAIpC,KAAK,CAAC,CAAA,iCAAA,EAAoC,IAAI,CAAC9C,SAAS,QAAQ,CAAC,CAAA;IAC/E,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACA;IACA;IACImF,EAAAA,YAAYA,GAAG;QACX,MAAM,IAAIrC,KAAK,CAAC,CAAA,sCAAA,EAAyC,IAAI,CAAC9C,SAAS,QAAQ,CAAC,CAAA;IACpF,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACIK,EAAAA,mBAAmBA,GAAG;IAClB;IACA,IAAA,IAAI,IAAI,CAACwC,WAAW,CAACuC,SAAS,CAAC/E,mBAAmB,KAAKuC,SAAS,CAACwC,SAAS,CAAC/E,mBAAmB,EAAE;IAC5F;UACA,IAAI,CAACwC,WAAW,CAACuC,SAAS,CAAC/E,mBAAmB,CAACgF,IAAI,CAAC,IAAI,CAAC,CAAA;IACzD,MAAA,OAAA;IACJ,KAAA;;IAEA;QACA,IAAI,CAACC,0BAA0B,EAAE,CAAA;IACrC,GAAA;;IAEA;IACJ;IACA;IACA;IACIA,EAAAA,0BAA0BA,GAAG;IACzB;IACA,IAAA,MAAMC,kBAAkB,GAAG,IAAI,CAACN,qBAAqB,EAAE,CAAA;QAEvD,IAAI,CAACM,kBAAkB,EAAE;UACrB,IAAI,CAAClE,KAAK,IAAInB,OAAO,CAACC,KAAK,CAAC,GAAG,IAAI,CAACH,SAAS,CAACwF,WAAW,EAAE,CAAA,+BAAA,CAAiC,EAAE,IAAI,CAAC1F,OAAO,CAAC,CAAA;IAC3G,MAAA,OAAA;IACJ,KAAA;;IAEA;IACA,IAAA,IAAI,CAACuE,wBAAwB,CAACkB,kBAAkB,EAAE,OAAO,EAAE,MAAM;UAC7D,IAAI,CAACE,OAAO,EAAE,CAAA;IAClB,KAAC,CAAC,CAAA;;IAEF;IACA,IAAA,IAAI,CAACpB,wBAAwB,CAACkB,kBAAkB,EAAE,MAAM,EAAE,MAAM;UAC5D,IAAI,CAACG,MAAM,EAAE,CAAA;IACjB,KAAC,CAAC,CAAA;;IAEF;IACA,IAAA,IAAI,CAACrB,wBAAwB,CAACkB,kBAAkB,EAAE,OAAO,EAAE,MAAM;UAC7D,IAAI,CAACI,QAAQ,EAAE,CAAA;IACnB,KAAC,CAAC,CAAA;;IAEF;QACA,IAAI,CAACtB,wBAAwB,CAACkB,kBAAkB,EAAE,SAAS,EAAGjB,KAAK,IAAK;IACpE,MAAA,IAAI,CAACsB,aAAa,CAACtB,KAAK,CAAC,CAAA;IAC7B,KAAC,CAAC,CAAA;;IAEF;IACA,IAAA,IAAI,CAACD,wBAAwB,CAACkB,kBAAkB,EAAE,OAAO,EAAE,MAAM;UAC7D,IAAI,CAACM,mBAAmB,EAAE,CAAA;UAC1B,IAAI,CAACxE,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,MAAM,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,OAAA,CAAS,EAAE,IAAI,CAACzF,SAAS,CAAC,CAAA;IAC1F,KAAC,CAAC,CAAA;IACN,GAAA;;IAEA;IACJ;IACA;IACA;IACA;MACI6F,aAAaA,CAACtB,KAAK,EAAE;IACjB;IACA,IAAA,MAAMwB,UAAU,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;QAC3G,IAAIA,UAAU,CAACtD,QAAQ,CAAC8B,KAAK,CAACG,GAAG,CAAC,EAAE;UAChC,IAAI,CAACoB,mBAAmB,EAAE,CAAA;UAC1B,IAAI,CAACxE,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,GAAG,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,iBAAA,CAAmB,EAAElB,KAAK,CAACG,GAAG,CAAC,CAAA;IAC5F,KAAA;;IAEA;QACA,IAAIH,KAAK,CAACG,GAAG,KAAK,WAAW,IAAIH,KAAK,CAACG,GAAG,KAAK,QAAQ,EAAE;UACrD,IAAI,CAACsB,aAAa,EAAE,CAAA;UACpB,IAAI,CAAC1E,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,GAAG,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,UAAA,CAAY,EAAElB,KAAK,CAACG,GAAG,CAAC,CAAA;IACrF,KAAA;IACJ,GAAA;;IAEA;IACJ;IACA;IACA;MACIuB,OAAOA,CAACC,IAAI,EAAE;IACV,IAAA,IAAI,CAAC5C,KAAK,CAACrC,IAAI,CAACiF,IAAI,CAAC,CAAA;IACzB,GAAA;;IAEA;IACJ;IACA;IACA;IACIC,EAAAA,iBAAiBA,GAAG;QAChB,IAAI,CAAC/C,SAAS,GAAG,CAAC,CAAA;QAClB,IAAI,CAACO,QAAQ,GAAG,CAAC,CAAA;QACjB,IAAI,CAACC,UAAU,GAAG,CAAC,CAAA;QACnB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAA;QAClB,IAAI,CAACH,UAAU,GAAG,CAAC,CAAA;QACnB,IAAI,CAACF,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAACK,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAACE,yBAAyB,GAAG,KAAK,CAAA;QACtC,IAAI,CAACD,mBAAmB,GAAG,KAAK,CAAA;IACpC,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACIqC,EAAAA,YAAYA,GAAG;QACX,IAAI,IAAI,CAAC1C,UAAU,IAAI,CAAC,IAAI,CAACN,SAAS,EAAE;UACpC,IAAI,CAACA,SAAS,GAAG,CAAC,CAAA;IACtB,KAAA;QACA,IAAI,CAAC,IAAI,CAACI,UAAU,IAAI,IAAI,CAACO,mBAAmB,EAAE;UAC9C,OAAO,IAAI,CAACX,SAAS,CAAA;IACzB,KAAA;QACA,IAAI,IAAI,CAACK,cAAc,EAAE;UACrB,MAAM4C,SAAS,GAAG,IAAI,CAAC5C,cAAc,GAAG,IAAI,CAACD,UAAU,CAAA;UACvD,OAAO,IAAI,CAACJ,SAAS,IAAIiD,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC,CAAC,CAAA;IAC3D,KAAA;IACA,IAAA,OAAO,IAAI,CAACjD,SAAS,IAAIF,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACK,UAAU,CAAC,CAAA;IAC1D,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACI8C,EAAAA,iBAAiBA,GAAG;IAChB,IAAA,IAAI,IAAI,CAAC5C,UAAU,IAAI,CAAC,IAAI,CAACF,UAAU,IAAI,IAAI,CAACO,mBAAmB,EAAE;UACjE,OAAO,IAAI,CAACV,cAAc,CAAA;IAC9B,KAAA;IACA,IAAA,OAAO,IAAI,CAACA,cAAc,IAAIH,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACK,UAAU,CAAC,CAAA;IAC/D,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACI+C,EAAAA,iBAAiBA,GAAG;QAChB,OAAO;UACHC,KAAK,EAAE,IAAI,CAACxG,SAAS;UACrByG,KAAK,EAAE,IAAI,CAACxG,SAAS;IACrByG,MAAAA,KAAK,EAAE,IAAI,CAACtB,YAAY,EAAE;UAC1BuB,KAAK,EAAE,IAAI,CAACxB,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC;IAC7ByB,MAAAA,MAAM,EAAE,IAAI,CAACR,YAAY,EAAE;IAC3BS,MAAAA,MAAM,EAAE,IAAI,CAACP,iBAAiB,EAAE;UAChCQ,KAAK,EAAE,IAAI,CAACnD,QAAQ;UACpBoD,MAAM,EAAE,IAAI,CAACrD,UAAU;UACvBsD,KAAK,EAAE,IAAI,CAACpD,UAAU;UACtBqD,MAAM,EAAE,IAAI,CAACpD,SAAAA;SAChB,CAAA;IACL,GAAA;;IAEA;IACJ;IACA;IACA;IACI6B,EAAAA,OAAOA,GAAG;QACN,IAAI,CAACpE,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,MAAM,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,QAAA,EAAW,IAAI,CAACzF,SAAS,GAAG,CAAC,CAAA;IACzF,IAAA,IAAI,CAACwD,UAAU,GAAGN,IAAI,CAACC,GAAG,EAAE,CAAA;QAC5B,MAAM+D,UAAU,GAAG,IAAI,CAAClH,SAAS,KAAK,IAAI,CAACF,OAAO,CAACqH,oBAAoB,CAAA;IAEvE,IAAA,IAAID,UAAU,IAAI,CAAC,IAAI,CAACnD,mBAAmB,EAAE;UACzC,IAAI,CAACJ,QAAQ,EAAE,CAAA;IACf,MAAA,IAAI,CAAC7D,OAAO,CAACsH,kBAAkB,EAAE,CAAA;IACjC,MAAA,IAAI,CAACtH,OAAO,CAACuH,gBAAgB,CAAC,IAAI,CAAC,CAAA;IACnC,MAAA,IAAI,CAACvH,OAAO,CAACwH,aAAa,GAAG,IAAI,CAACtH,SAAS,CAAA;IAC3C,MAAA,IAAI,CAACF,OAAO,CAACyH,kBAAkB,EAAE,CAAA;IACrC,KAAA;IAEA,IAAA,IAAI,CAACzH,OAAO,CAACqH,oBAAoB,GAAG,IAAI,CAACnH,SAAS,CAAA;QAClD,IAAI,CAAC8D,cAAc,GAAG,IAAI,CAAA;IAC9B,GAAA;;IAEA;IACJ;IACA;IACA;IACI6B,EAAAA,MAAMA,GAAG;QACL,IAAI,CAACrE,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,MAAM,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,OAAA,EAAU,IAAI,CAACzF,SAAS,GAAG,CAAC,CAAA;IACxF,IAAA,IAAI,CAAC,IAAI,CAACwD,UAAU,EAAE,OAAA;QAEtB,IAAI,IAAI,CAACQ,yBAAyB,EAAE;IAChC,MAAA,IAAI,IAAI,CAACP,cAAc,IAAI,IAAI,CAACD,UAAU,EAAE;YACxC,IAAI,CAACJ,SAAS,IAAK,IAAI,CAACK,cAAc,GAAG,IAAI,CAACD,UAAW,CAAA;IAC7D,OAAA;UACA,IAAI,CAACC,cAAc,GAAG,IAAI,CAAA;UAC1B,IAAI,CAACD,UAAU,GAAG,IAAI,CAAA;IACtB,MAAA,OAAA;IACJ,KAAA;IAEA,IAAA,IAAI,CAAC,IAAI,CAACO,mBAAmB,EAAE;IAC3B,MAAA,MAAMZ,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE,CAAA;IACtB,MAAA,IAAI,CAACC,SAAS,IAAID,GAAG,GAAG,IAAI,CAACK,UAAU,CAAA;IACvC,MAAA,IAAI,CAAC,IAAI,CAACE,UAAU,EAAE;IAClB,QAAA,IAAI,CAACL,cAAc,IAAIF,GAAG,GAAG,IAAI,CAACK,UAAU,CAAA;IAChD,OAAA;IACA,MAAA,IAAI,CAAC1D,OAAO,CAACsH,kBAAkB,EAAE,CAAA;IACjC,MAAA,IAAI,CAACtH,OAAO,CAACuH,gBAAgB,CAAC,IAAI,CAAC,CAAA;IACvC,KAAA;QACA,IAAI,CAAC7D,UAAU,GAAG,IAAI,CAAA;IAC1B,GAAA;;IAEA;IACJ;IACA;IACA;IACIoC,EAAAA,QAAQA,GAAG;QACP,IAAI,CAACtE,KAAK,IAAInB,OAAO,CAACgB,GAAG,CAAC,MAAM,IAAI,CAAClB,SAAS,CAACwF,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAACzF,SAAS,GAAG,CAAC,CAAA;IAC3F,IAAA,IAAI,CAACyD,cAAc,GAAGP,IAAI,CAACC,GAAG,EAAE,CAAA;QAChC,IAAI,IAAI,CAACY,mBAAmB,EAAE;IAC1B,MAAA,IAAI,CAACP,UAAU,GAAG,IAAI,CAACC,cAAc,CAAA;IACzC,KAAC,MAAM,IAAI,CAAC,IAAI,CAACD,UAAU,EAAE;IACzB,MAAA,OAAA;IACJ,KAAA;QAEA,IAAI,CAACO,mBAAmB,GAAG,KAAK,CAAA;QAChC,IAAI,CAACC,yBAAyB,GAAG,IAAI,CAAA;IAErC,IAAA,IAAI,CAAC,IAAI,CAACN,UAAU,EAAE;UAClB,IAAI,CAACL,cAAc,IAAI,IAAI,CAACI,cAAc,GAAG,IAAI,CAACD,UAAU,CAAA;IAChE,KAAA;QAEA,IAAI,IAAI,CAACM,cAAc,EAAE;UACrB,IAAI,CAACJ,UAAU,EAAE,CAAA;UACjB,IAAI,CAACI,cAAc,GAAG,KAAK,CAAA;IAC/B,KAAA;IAEA,IAAA,IAAI,CAAC,IAAI,CAAChE,OAAO,CAAC0H,cAAc,EAAE;IAC9B,MAAA,IAAI,CAAC1H,OAAO,CAAC0H,cAAc,GAAG,IAAI,CAACxH,SAAS,CAAA;IAChD,KAAA;IAEA,IAAA,IAAI,CAACF,OAAO,CAACsH,kBAAkB,EAAE,CAAA;IACjC,IAAA,IAAI,CAACtH,OAAO,CAACuH,gBAAgB,CAAC,IAAI,CAAC,CAAA;IACvC,GAAA;;IAEA;IACJ;IACA;IACA;IACIvB,EAAAA,mBAAmBA,GAAG;QAClB,IAAI,CAACjC,SAAS,EAAE,CAAA;IACpB,GAAA;;IAEA;IACJ;IACA;IACA;IACImC,EAAAA,aAAaA,GAAG;QACZ,IAAI,CAACpC,UAAU,EAAE,CAAA;IACrB,GAAA;;IAEA;IACJ;IACA;IACA;IACA;IACI6D,EAAAA,OAAOA,GAAG;QACN,IAAI,IAAI,CAACpD,YAAY,EAAE,OAAA;QACvB,IAAI,CAACA,YAAY,GAAG,IAAI,CAAA;;IAExB;QACA,KAAK,MAAM,GAAGqD,SAAS,CAAC,IAAI,IAAI,CAACzD,eAAe,EAAE;IAC9C,MAAA,KAAK,MAAM;YAAElE,OAAO;YAAEwE,KAAK;YAAEC,OAAO;IAAEC,QAAAA,OAAAA;WAAS,IAAIiD,SAAS,EAAE;YAC1D,IAAI;cACA3H,OAAO,CAAC4H,mBAAmB,CAACpD,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAA;aACvD,CAAC,OAAOmD,CAAC,EAAE;IACR,UAAA,IAAI,CAACtG,KAAK,IAAInB,OAAO,CAACqB,IAAI,CAAC,CAAA,iCAAA,EAAoC+C,KAAK,CAAA,CAAE,EAAEqD,CAAC,CAAC,CAAA;IAC9E,SAAA;IACJ,OAAA;IACJ,KAAA;IACA,IAAA,IAAI,CAAC3D,eAAe,CAAC4D,KAAK,EAAE,CAAA;;IAE5B;IACA,IAAA,KAAK,MAAM7C,OAAO,IAAI,IAAI,CAACb,OAAO,EAAE;UAChC,IAAI;YACA2D,YAAY,CAAC9C,OAAO,CAAC,CAAA;YACrB+C,aAAa,CAAC/C,OAAO,CAAC,CAAA;WACzB,CAAC,OAAO4C,CAAC,EAAE;IACR,QAAA,IAAI,CAACtG,KAAK,IAAInB,OAAO,CAACqB,IAAI,CAAC,CAAA,uBAAA,EAA0BwD,OAAO,CAAA,CAAE,EAAE4C,CAAC,CAAC,CAAA;IACtE,OAAA;IACJ,KAAA;IACA,IAAA,IAAI,CAACzD,OAAO,CAAC0D,KAAK,EAAE,CAAA;;IAEpB;QACA,IAAI,CAAC9H,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,CAACuD,KAAK,GAAG,IAAI,CAAA;QACjB,IAAI,CAACxD,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,CAAC0D,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAA;IAC9B,GAAA;IACJ;;;;;;;;;;;;;;;"}