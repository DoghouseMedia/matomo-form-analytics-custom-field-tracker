{"version":3,"file":"index.js","sources":["../src/FormAnalyticsCustomFieldTracker.js","../src/Enums/FieldCategories.js","../src/BaseField.js"],"sourcesContent":["/**\n * Field Classes Registry\n * Maps field types to their corresponding classes\n */\nconst fieldClasses = {};\nlet debugMode = false;\n\n/**\n * Factory function for creating fields of any type\n * Uses the factory pattern to create field instances based on type\n *\n * @param {Object} tracker - Matomo tracker instance\n * @param {HTMLElement} element - DOM element\n * @param {string} fieldName - Field identifier\n * @param {string} fieldType - Type of field to create\n * @returns {BaseField|null} Created field instance or null if type not found\n * @throws {Error} If field creation fails\n */\nfunction createField(tracker, element, fieldName, fieldType) {\n    const FieldClass = fieldClasses[fieldType];\n    if (!FieldClass) {\n        debugMode && console.error(`No field class found for type: ${fieldType}`);\n        return null;\n    }\n\n    try {\n        // Verify the fieldType matches the class's static property\n        if (FieldClass.fieldType !== fieldType) {\n            debugMode && console.error(`Field type mismatch: expected ${fieldType}, got ${FieldClass.fieldType}`);\n            return null;\n        }\n\n        const field = new FieldClass(tracker, element, fieldName);\n        field.setupEventListeners();\n        return field;\n    } catch (error) {\n        debugMode && console.error(`Error creating ${fieldType} field:`, error);\n        return null;\n    }\n}\n\nfunction injectCustomFields(tracker, form) {\n    // Dynamically get field types and their selectors from registered field classes\n    Object.entries(fieldClasses).forEach(([fieldType, FieldClass]) => {\n        // Check if the field class has a selector defined\n        if (FieldClass.selector) {\n            const fields = form.querySelectorAll(FieldClass.selector);\n            fields.forEach(field => {\n                const fieldName = field.getAttribute('data-name');\n                const customField = createField(tracker, field, fieldName, fieldType);\n\n                if (customField) {\n                    // Add to tracker\n                    tracker.fields.push(customField);\n                    tracker.fieldNodes.push(field);\n\n                    debugMode && console.log(`✅ Integrated custom ${fieldType} field: ${fieldName}`);\n                }\n            });\n        }\n    });\n}\n\nexport default {\n    init(customFields = [], debug = false) {\n        debugMode = debug;\n\n        // Register custom fields if provided\n        if (customFields && customFields.length > 0) {\n            customFields.forEach(({ fieldType, FieldClass }) => {\n                if (fieldType && FieldClass) {\n                    fieldClasses[fieldType] = FieldClass;\n                } else {\n                    debugMode && console.warn('Custom field must have fieldType and FieldClass properties');\n                }\n            });\n        }\n\n        // Wait for FormAnalytics to initialize\n        window.matomoFormAnalyticsAsyncInit = function () {\n            const forms = document.querySelectorAll('form, [data-matomo-form]');\n            forms.forEach(form => {\n                setTimeout(() => {\n                    const tracker = window.Piwik?.FormAnalytics?.element?.findFormTrackerInstance(form);\n                    if (tracker) {\n                        injectCustomFields(tracker, form);\n                    }\n                }, 100);\n            });\n        };\n    }\n};\n\n/**\n * Get available field types\n * @returns {string[]} Array of supported field types\n */\nexport const getAvailableFieldTypes = () => Object.keys(fieldClasses);\n\n/**\n * Check if a field type is supported\n * @param {string} fieldType - Field type to check\n * @returns {boolean} True if supported, false otherwise\n */\nexport const isFieldTypeSupported = (type) => type in fieldClasses;\n\n/**\n * Provides global access to the current debug mode state.\n * This allows other modules (e.g., BaseField) to check whether debug logging is enabled,\n * without needing to pass the debug flag through constructors or method parameters.\n */\nexport const getDebugMode = () => debugMode;\n","/**\n * Field Categories Enum\n *\n * Defines the three field categories supported by Matomo FormAnalytics\n * - FIELD_TEXT: Text-based input fields\n * - FIELD_SELECTABLE: Selection-based fields\n * - FIELD_CHECKABLE: Checkbox/radio fields\n *\n * @enum {string}\n */\nexport const FieldCategories = {\n    /**\n     * Text-based input fields (password, text, url, tel, email, search, textarea)\n     */\n    TEXT: 'FIELD_TEXT',\n    /**\n     * Selection-based fields (color, date, datetime, datetime-local, month, number, range, time, week, select)\n     */\n    SELECTABLE: 'FIELD_SELECTABLE',\n    /**\n     * Checkbox/radio fields (radio, checkbox)\n     */\n    CHECKABLE: 'FIELD_CHECKABLE'\n};\n\n/**\n * Validates if a field category is supported by Matomo\n * @param {string} category - Field category to validate\n * @returns {boolean} True if category is valid\n */\nexport function isValidFieldCategory(category) {\n    return Object.values(FieldCategories).includes(category);\n}\n\n/**\n * Gets all supported field categories\n * @returns {string[]} Array of all supported field categories\n */\nexport function getSupportedFieldCategories() {\n    return Object.values(FieldCategories);\n}\n\n/**\n * Gets field category description\n * @param {string} category - Field category\n * @returns {string} Human-readable description\n */\nexport function getFieldCategoryDescription(category) {\n    const descriptions = {\n        [FieldCategories.TEXT]: 'Text-based input fields (password, text, url, tel, email, search, textarea)',\n        [FieldCategories.SELECTABLE]: 'Selection-based fields (color, date, datetime, datetime-local, month, number, range, time, week, select)',\n        [FieldCategories.CHECKABLE]: 'Checkbox/radio fields (radio, checkbox)'\n    };\n\n    return descriptions[category] || 'Unknown field category';\n}\n","import { FieldCategories } from './Enums/FieldCategories.js';\nimport { getDebugMode } from './FormAnalyticsCustomFieldTracker.js';\n\n/**\n * BaseField Class\n *\n * A reusable abstract class providing shared tracking logic\n * for all custom form field types (e.g., WYSIWYG, rating, image selector).\n *\n * @class BaseField\n * @abstract\n */\nexport class BaseField {\n    /**\n     * Field Categories ENUM - Available to all subclasses\n     * @static\n     */\n    static FieldCategories = FieldCategories;\n\n    /**\n     * Creates a new BaseField instance\n     *\n     * @param {Object} tracker - Matomo tracker instance\n     * @param {HTMLElement} element - DOM element for the field\n     * @param {string} fieldName - Unique identifier for the field\n     */\n    constructor(tracker, element, fieldName) {\n        // Get fieldType and category from static properties\n        const fieldType = this.constructor.fieldType;\n        const category = this.constructor.category;\n        const selector = this.constructor.selector;\n\n        if (!fieldType || !category || !selector) {\n            throw new Error(`${this.constructor.name} must define static fieldType, selector and category properties`);\n        }\n\n        // Common properties for all field types\n        this.discoveredDate = Date.now();\n        this.timespent = 0;\n        this.hesitationtime = 0;\n        this.nodes = [element];\n        this.tagName = 'div';\n        this.fieldName = fieldName;\n        this.fieldType = fieldType;\n        this.startFocus = null;\n        this.timeLastChange = null;\n        this.numChanges = 0;\n        this.numFocus = 0;\n        this.numDeletes = 0;\n        this.numCursor = 0;\n        this.canCountChange = true;\n        this.isFocusedCausedAuto = false;\n        this.hasChangedValueSinceFocus = false;\n        this.tracker = tracker;\n        this.category = category;\n\n        // Store references for field-specific implementations\n        this.element = element;\n        this.debug = getDebugMode();\n    }\n\n    /**\n     * Abstract method: Gets the interactive element for this field\n     * Must be implemented by subclasses to define their interactive element\n     * @abstract\n     * @returns {HTMLElement|NodeList} Interactive element for this field\n     * @throws {Error} If not implemented by subclass\n     */\n    getInteractiveElement() {\n        throw new Error(`getInteractiveElement() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Abstract method: Determines if field is blank/empty\n     * Must be implemented by subclasses\n     * @abstract\n     * @returns {boolean} True if field is blank, false otherwise\n     * @throws {Error} If not implemented by subclass\n     */\n    isBlank() {\n        throw new Error(`isBlank() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Abstract method: Gets field size/content length\n     * Must be implemented by subclasses\n     * @abstract\n     * @returns {number} Field size (content length, rating value, etc.)\n     * @throws {Error} If not implemented by subclass\n     */\n    getFieldSize() {\n        throw new Error(`getFieldSize() must be implemented by ${this.fieldType} field`);\n    }\n\n    /**\n     * Sets up event listeners for all custom field types\n     * This method provides common event handling for all custom fields\n     * Can be overridden by subclasses for custom event handling\n     */\n    setupEventListeners() {\n        // Check if the subclass has overridden this method.\n        if (this.constructor.prototype.setupEventListeners !== BaseField.prototype.setupEventListeners) {\n            // Subclass has its own implementation, call it\n            this.constructor.prototype.setupEventListeners.call(this);\n            return;\n        }\n\n        // Default implementation for fields that don't override\n        this.setupDefaultEventListeners();\n    }\n\n    /**\n     * Sets up default event listeners for standard field types\n     * Used by fields that don't need custom event handling\n     */\n    setupDefaultEventListeners() {\n        // Get the actual interactive element (overridden by subclasses)\n        const interactiveElement = this.getInteractiveElement();\n\n        if (!interactiveElement) {\n            this.debug && console.error(`${this.fieldType.toUpperCase()} interactive element not found:`, this.element);\n            return;\n        }\n\n        // Focus event\n        interactiveElement.addEventListener('focus', () => {\n            this.onFocus();\n        });\n\n        // Blur event\n        interactiveElement.addEventListener('blur', () => {\n            this.onBlur();\n        });\n\n        // Input event (typing)\n        interactiveElement.addEventListener('input', () => {\n            this.onChange();\n        });\n\n        // Keydown event (cursor movements, deletions)\n        interactiveElement.addEventListener('keydown', (event) => {\n            this.handleKeydown(event);\n        });\n\n        // Click event (cursor movements)\n        interactiveElement.addEventListener('click', () => {\n            this.trackCursorMovement();\n            this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} click:`, this.fieldName);\n        });\n    }\n\n    /**\n     * Handles keydown events for cursor and deletion tracking\n     * Tracks arrow keys, home/end, and backspace/delete\n     * @param {KeyboardEvent} event - Keyboard event object\n     */\n    handleKeydown(event) {\n        // Track cursor movements\n        const cursorKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End', 'PageUp', 'PageDown'];\n        if (cursorKeys.includes(event.key)) {\n            this.trackCursorMovement();\n            this.debug && console.log(`${this.fieldType.toUpperCase()} cursor movement:`, event.key);\n        }\n\n        // Track deletions\n        if (event.key === 'Backspace' || event.key === 'Delete') {\n            this.trackDeletion();\n            this.debug && console.log(`${this.fieldType.toUpperCase()} deletion:`, event.key);\n        }\n    }\n\n    /**\n     * Adds a DOM node to this field's node collection\n     * @param {HTMLElement} node - DOM node to add\n     */\n    addNode(node) {\n        this.nodes.push(node);\n    }\n\n    /**\n     * Resets all tracking counters when form is submitted\n     * Called automatically by Matomo tracker on form submission\n     */\n    resetOnFormSubmit() {\n        this.timespent = 0;\n        this.numFocus = 0;\n        this.numDeletes = 0;\n        this.numCursor = 0;\n        this.numChanges = 0;\n        this.startFocus = null;\n        this.timeLastChange = null;\n        this.canCountChange = true;\n        this.hasChangedValueSinceFocus = false;\n        this.isFocusedCausedAuto = false;\n    }\n\n    /**\n     * Calculates total time spent in this field\n     * Includes both tracked time and current session time\n     * @returns {number} Time spent in milliseconds\n     */\n    getTimeSpent() {\n        if (this.numChanges && !this.timespent) {\n            this.timespent = 1;\n        }\n        if (!this.startFocus || this.isFocusedCausedAuto) {\n            return this.timespent;\n        }\n        if (this.timeLastChange) {\n            const timeSpent = this.timeLastChange - this.startFocus;\n            return this.timespent + (timeSpent > 0 ? timeSpent : 0);\n        }\n        return this.timespent + (Date.now() - this.startFocus);\n    }\n\n    /**\n     * Calculates hesitation time before first interaction\n     * Time from field detection to first user interaction\n     * @returns {number} Hesitation time in milliseconds\n     */\n    getHesitationTime() {\n        if (this.numChanges || !this.startFocus || this.isFocusedCausedAuto) {\n            return this.hesitationtime;\n        }\n        return this.hesitationtime + (Date.now() - this.startFocus);\n    }\n\n    /**\n     * Generates tracking parameters for Matomo FormAnalytics\n     * Returns all field metrics in Matomo-compatible format\n     * @returns {Object} Object containing all tracking parameters\n     */\n    getTrackingParams() {\n        return {\n            fa_fn: this.fieldName,\n            fa_ft: this.fieldType,\n            fa_fs: this.getFieldSize(),\n            fa_fb: this.isBlank() ? 1 : 0,\n            fa_fts: this.getTimeSpent(),\n            fa_fht: this.getHesitationTime(),\n            fa_ff: this.numFocus,\n            fa_fch: this.numChanges,\n            fa_fd: this.numDeletes,\n            fa_fcu: this.numCursor\n        };\n    }\n\n    /**\n     * Handles field focus event\n     * Tracks focus count, sets entry field, and triggers Matomo tracking\n     */\n    onFocus() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} focus (${this.fieldName})`);\n        this.startFocus = Date.now();\n        const isNewField = this.fieldName !== this.tracker.lastFocusedFieldName;\n\n        if (isNewField && !this.isFocusedCausedAuto) {\n            this.numFocus++;\n            this.tracker.setEngagedWithForm();\n            this.tracker.trackFieldUpdate(this);\n            this.tracker.exitFieldName = this.fieldName;\n            this.tracker.scheduleSendUpdate();\n        }\n\n        this.tracker.lastFocusedFieldName = this.fieldName;\n        this.canCountChange = true;\n    }\n\n    /**\n     * Handles field blur event\n     * Calculates time spent and updates tracking data\n     */\n    onBlur() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} blur (${this.fieldName})`);\n        if (!this.startFocus) return;\n\n        if (this.hasChangedValueSinceFocus) {\n            if (this.timeLastChange && this.startFocus) {\n                this.timespent += (this.timeLastChange - this.startFocus);\n            }\n            this.timeLastChange = null;\n            this.startFocus = null;\n            return;\n        }\n\n        if (!this.isFocusedCausedAuto) {\n            const now = Date.now();\n            this.timespent += now - this.startFocus;\n            if (!this.numChanges) {\n                this.hesitationtime += now - this.startFocus;\n            }\n            this.tracker.setEngagedWithForm();\n            this.tracker.trackFieldUpdate(this);\n        }\n        this.startFocus = null;\n    }\n\n    /**\n     * Handles field change event\n     * Tracks changes, hesitation time, and sets entry field\n     */\n    onChange() {\n        this.debug && console.log(`⚡️ ${this.fieldType.toUpperCase()} changed (${this.fieldName})`);\n        this.timeLastChange = Date.now();\n        if (this.isFocusedCausedAuto) {\n            this.startFocus = this.timeLastChange;\n        } else if (!this.startFocus) {\n            return;\n        }\n\n        this.isFocusedCausedAuto = false;\n        this.hasChangedValueSinceFocus = true;\n\n        if (!this.numChanges) {\n            this.hesitationtime += this.timeLastChange - this.startFocus;\n        }\n\n        if (this.canCountChange) {\n            this.numChanges++;\n            this.canCountChange = false;\n        }\n\n        if (!this.tracker.entryFieldName) {\n            this.tracker.entryFieldName = this.fieldName;\n        }\n\n        this.tracker.setEngagedWithForm();\n        this.tracker.trackFieldUpdate(this);\n    }\n\n    /**\n     * Helper method for tracking cursor movements\n     * Increments cursor count for arrow keys, clicks, etc.\n     */\n    trackCursorMovement() {\n        this.numCursor++;\n    }\n\n    /**\n     * Helper method for tracking deletions\n     * Increments delete count for backspace, delete keys, etc.\n     */\n    trackDeletion() {\n        this.numDeletes++;\n    }\n}\n"],"names":["fieldClasses","debugMode","createField","tracker","element","fieldName","fieldType","FieldClass","console","error","field","setupEventListeners","injectCustomFields","form","Object","entries","forEach","selector","fields","querySelectorAll","getAttribute","customField","push","fieldNodes","log","init","customFields","debug","length","warn","window","matomoFormAnalyticsAsyncInit","forms","document","setTimeout","Piwik","FormAnalytics","findFormTrackerInstance","getDebugMode","FieldCategories","TEXT","SELECTABLE","CHECKABLE","isValidFieldCategory","category","values","includes","getSupportedFieldCategories","getFieldCategoryDescription","descriptions","BaseField","constructor","Error","name","discoveredDate","Date","now","timespent","hesitationtime","nodes","tagName","startFocus","timeLastChange","numChanges","numFocus","numDeletes","numCursor","canCountChange","isFocusedCausedAuto","hasChangedValueSinceFocus","getInteractiveElement","isBlank","getFieldSize","prototype","call","setupDefaultEventListeners","interactiveElement","toUpperCase","addEventListener","onFocus","onBlur","onChange","event","handleKeydown","trackCursorMovement","cursorKeys","key","trackDeletion","addNode","node","resetOnFormSubmit","getTimeSpent","timeSpent","getHesitationTime","getTrackingParams","fa_fn","fa_ft","fa_fs","fa_fb","fa_fts","fa_fht","fa_ff","fa_fch","fa_fd","fa_fcu","isNewField","lastFocusedFieldName","setEngagedWithForm","trackFieldUpdate","exitFieldName","scheduleSendUpdate","entryFieldName"],"mappings":"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"}